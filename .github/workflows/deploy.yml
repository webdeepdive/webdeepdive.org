# .github/workflows/deploy.yml
#
# This is a GitHub Actions workflow file that defines a series of automated jobs.
# This specific workflow deploys your project to Vercel when you push to the 'main' branch.

# Name of the workflow, which will be displayed in the "Actions" tab of your GitHub repository.
name: Deploy to Vercel

# The 'on' keyword defines the trigger for this workflow.
# In this case, the workflow will run every time there is a 'push' event to the 'main' branch.
on:
  push:
    branches:
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "deploy-to-vercel".
  deploy-to-vercel:
    # The type of runner that the job will run on. 'ubuntu-latest' is a good general-purpose choice.
    runs-on: ubuntu-latest

    # 'steps' represents a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check out your repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install the Vercel CLI
      # This command installs the latest version of the Vercel Command Line Interface,
      # which is needed to interact with the Vercel platform.
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # Step 3: Pull Vercel Environment Information
      # This command pulls the environment variables and project settings from your Vercel project.
      # It links the local directory (in the GitHub runner) to your Vercel project.
      # The '--yes' flag automatically answers "yes" to any prompts.
      # The '--environment=production' flag specifies that we are targeting the production environment.
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_DEPLOY_TOKEN }}

      # Step 4: Build Project Artifacts
      # This command runs the build script for your project (e.g., 'next build', 'npm run build').
      # The '--prod' flag ensures it's a production build. The output is placed in a '.vercel/output' directory.
    #   - name: Build Project Artifacts
    #     run: vercel build --prod --token=${{ secrets.VERCEL_DEPLOY_TOKEN }}

      # Step 5: Deploy Project Artifacts to Vercel
      # This command deploys the prebuilt artifacts from the '.vercel/output' directory to Vercel.
      # Using '--prebuilt' is efficient as it skips the build step on Vercel's servers.
      # The '--prod' flag aliases this deployment to your production domain.
      - name: Deploy Project Artifacts to Vercel
        run: vercel --prod --local-config paths.json --token=${{ secrets.VERCEL_DEPLOY_TOKEN }}

# --- Configuration Instructions ---
#
# To use this workflow, you need to create three secrets in your GitHub repository settings.
# Go to: Settings > Secrets and variables > Actions > New repository secret
#
# 1. VERCEL_TOKEN:
#    - This is your Vercel account token.
#    - Generate it here: https://vercel.com/account/tokens
#    - Create a new secret named 'VERCEL_TOKEN' and paste the token value.
#
# 2. VERCEL_ORG_ID:
#    - This is the ID of your Vercel organization or team.
#    - Find it in your Vercel account settings under "General".
#    - Or, run 'vercel whoami' in your local terminal after logging in. The "id" listed under your scope is the Org ID.
#    - Create a new secret named 'VERCEL_ORG_ID' and paste the ID.
#
# 3. VERCEL_PROJECT_ID:
#    - This is the ID of the specific Vercel project you want to deploy.
#    - In your local project directory (that's linked to Vercel), find this ID inside the '.vercel/project.json' file.
#    - Create a new secret named 'VERCEL_PROJECT_ID' and paste the ID.
#
# Once these secrets are set, commit this .yml file to your repository in the following directory: .github/workflows/
# Pushing to the 'main' branch will then trigger the deployment automatically.
